#version 450
#include "constants.glsl"
#include "common.glsl"

#define WORKGROUP_SIZE 8

layout (local_size_x=WORKGROUP_SIZE, local_size_y=WORKGROUP_SIZE, local_size_z=1) in;

// NOTE: padding is required in the corresponding CPU struct
struct Vertex
{
    vec4 pos;      /* position */
    vec4 normal;   /* normal vector */
    vec2 uv;       /* tex coords */
    uint alpha;    /* transparency value */
};

layout(std140, push_constant) uniform Push {
    uvec3 n_vertices; // number of vertices in each dimension
} push;

layout(std140, binding = 0) buffer buf {
   Vertex vertex[];
};

layout(std140, binding = 1) buffer pde {
   vec4 u[]; // values at current time step, previous time step, previous previous time step
};

layout (std140, binding = 2) uniform UBO {
    vec4 drop; // 0 or 1, x, y, a
    float t;
    float dt;
    int iter;
} ubo;



uint get_vert_idx(ivec3 idx) {
    ivec3 nv = ivec3(push.n_vertices);
    return nv.x * clamp(idx.y, 0, nv.y - 1) + clamp(idx.x, 0, nv.x - 1);
}



vec3 get_pos(ivec3 idx) {
    uint vidx = get_vert_idx(idx);
    return vertex[vidx].pos.xyz;
}

void set_pos(ivec3 idx, vec3 pos) {
    uint vidx = get_vert_idx(idx);
    vertex[vidx].pos.xyz = pos;
}

void set_normal(ivec3 idx, vec3 normal) {
    uint vidx = get_vert_idx(idx);
    vertex[vidx].normal.xyz = normal;
}



float get_val(ivec3 idx, uint comp) {
    uint vidx = get_vert_idx(idx);
    return u[vidx][comp];
}

void set_val(ivec3 idx, uint comp, float w) {
    uint vidx = get_vert_idx(idx);
    u[vidx][comp] = w;
}



void main() {
    // algorithm from
    // https://github.com/hplgit/fdm-book/blob/master/src/wave/wave2D_u0/wave2D_u0.py

    ivec3 nv = ivec3(push.n_vertices);
    ivec3 idx = ivec3(gl_GlobalInvocationID);
    if (idx.x >= nv.x || idx.y >= nv.y)
        return;

    float t = ubo.t;
    float dt = ubo.dt;
    float Cx2 = .01 * dt;
    float Cy2 = Cx2;
    float D1 = 2;
    float D2 = 1;
    float x = -1 + 2 * (idx.x / float(nv.x - 1));
    float y = -1 + 2 * (idx.y / float(nv.y - 1));

    // Get the current and previous values.
    uint vidx = get_vert_idx(idx);
    vec3 uu = u[vidx].xyz; // current value, previous value, previous previous value
    float u0 = uu.x; // current
    float u1 = uu.y; // previous
    float u2 = uu.z; // previous previous

    // if (ubo.iter == 0) {
    //     Cx2 = 0.5 * Cx2;
    //     Cy2 = 0.5 * Cy2;
    //     D1 = 1;
    //     D2 = 0;
    // }

    // Neighbor vertices.
    float pd = get_val(idx + ivec3(+1, 0, 0), 1);
    float pu = get_val(idx + ivec3(-1, 0, 0), 1);
    float pr = get_val(idx + ivec3(0, +1, 0), 1);
    float pl = get_val(idx + ivec3(0, -1, 0), 1);

    // Update u.
    float pxx = pl + pr - 2 * u1;
    float pyy = pu + pd - 2 * u1;
    u0 = D1 * u1 - D2 * u2 + Cx2 * pxx + Cy2 * pyy;

    if (ubo.drop.x > 0) {
        x -= ubo.drop.y;
        y -= ubo.drop.z;
        u0 -= dt*dt * ubo.drop.w * exp(-200 * (x*x+y*y));
    }

    // Boundary conditions.
    bool cx0 = idx.x == 0;
    bool cx1 = idx.x == nv.x - 1;
    bool cy0 = idx.y == 0;
    bool cy1 = idx.y == nv.y - 1;
    if (cx0) { u0 = pd; }
    if (cx1) { u0 = pu; }
    if (cy0) { u0 = pr; }
    if (cy1) { u0 = pl; }
    // if (cx0 && cy0) { u0 = get_val(idx + ivec3(+1, +1, 0), 1); }
    // if (cx0 && cy1) { u0 = get_val(idx + ivec3(+1, -1, 0), 1); }
    // if (cx1 && cy0) { u0 = get_val(idx + ivec3(-1, +1, 0), 1); }
    // if (cx1 && cy1) { u0 = get_val(idx + ivec3(-1, -1, 0), 1); }

    // Update vertex buffer with the new value.
    vertex[vidx].pos.y = u0;

    // Update the vertex color.
    vertex[vidx].uv = colormap_uv(7, 128 - int(clamp(500 * (u0), 0, 255)));

    // Update normals.
    vec3 p0 = get_pos(idx + ivec3(0, 0, 0));
    vec3 p1 = get_pos(idx + ivec3(1, 0, 0));
    vec3 p2 = get_pos(idx + ivec3(0, 1, 0));
    p0.y = u1;
    p1.y = pd;
    p2.y = pr;
    vec3 normal = cross(normalize(p1 - p0), normalize(p2 - p0));
    set_normal(idx, normal);

    // Update the u vec3 array with current, prev, prev prev.
    u[vidx].x = u2;
    u[vidx].y = u0;
    u[vidx].z = u1;
}
